/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useContext } from 'react'
import { Float, useGLTF } from '@react-three/drei'
import { MeshStandardMaterial } from 'three'
import { useFrame } from '@react-three/fiber'
import { apiUrl } from '@/config'

// Context
import { UserContext } from '@/context/UserProvider'
import axios from 'axios'

export function Key(props) {
  const { nodes, materials } = useGLTF('/models/world/key.glb')
  const keyRef = useRef(null)

  // Context
  const { user, setUser } = useContext(UserContext)

  // Función para agregar el id de la llave al array de llaves recolectadas por el usuario
  const handleOnClickKey = () => {
    // Agregar el id de la llave al array de llaves recolectadas por el usuario
    axios
      .patch(`${apiUrl}/users/${user._id}`, { keys: [...user.keys, props._id], points: user.points })
      .then((response) => {
        // Actualizar el usuario local haciendo una petición al servidor
        axios.get(`${apiUrl}/users/${user._id}`).then((response) => {
          setUser(response.data)
        })
      })
      .catch((error) => {
        console.log('ERROR:', error)
      })
  }

  useFrame(({ clock }) => {
    keyRef.current.rotation.y = clock.elapsedTime * 0.5
  })
  return (
    // <Float
    //   speed={1} // Animation speed, defaults to 1
    //   rotationIntensity={1} // XYZ rotation intensity, defaults to 1
    //   floatIntensity={1} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1
    //   floatingRange={[1, 2]}
    // >
    <group
      {...props}
      ref={keyRef}
      onClick={() => {
        handleOnClickKey()
      }}
    >
      {/* <pointLight position={[0, 0, 0]} intensity={1} /> */}
      <mesh castShadow receiveShadow geometry={nodes.key.geometry}>
        <meshStandardMaterial color={'#E7B229'} metalness={0.01} roughness={0} />
      </mesh>
    </group>
    // </Float>
  )
}

useGLTF.preload('/models/world/key.glb')
